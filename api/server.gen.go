// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/dailycrypto-me/daily-indexer/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns yield for the address
	// (GET /address/{address}/yieldForInterval)
	GetAddressYieldForInterval(ctx echo.Context, address AddressParam, params GetAddressYieldForIntervalParams) error
	// Returns the list of DLY token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetAddressYieldForInterval converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYieldForInterval(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldForIntervalParams
	// ------------- Optional query parameter "fromBlock" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromBlock", ctx.QueryParams(), &params.FromBlock)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromBlock: %s", err))
	}

	// ------------- Required query parameter "toBlock" -------------

	err = runtime.BindQueryParameter("form", true, true, "toBlock", ctx.QueryParams(), &params.ToBlock)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toBlock: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressYieldForInterval(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/address/:address/yieldForInterval", wrapper.GetAddressYieldForInterval)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wUAAP//MpWWuHpCAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
